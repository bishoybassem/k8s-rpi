- delegate_to: localhost
  run_once: true
  become: false
  block:
    - name: Create download directory
      file:
        state: directory
        dest: "{{ role_path }}/files/downloads"

    - name: Download kubernetes client binaries
      get_url:
        url: https://dl.k8s.io/{{ kubernetes_version }}/kubernetes-client-linux-arm.tar.gz
        dest: "{{ role_path }}/files/downloads/kubernetes-client-linux-arm-{{ kubernetes_version }}.tar.gz"

- name: Extract and copy kubectl
  unarchive:
    src: downloads/kubernetes-client-linux-arm-{{ kubernetes_version }}.tar.gz
    dest: /usr/bin
    mode: 0755
    extra_opts:
      - --no-same-owner
      - --strip-components=3

- name: Pull hyperkube docker image
  command: docker pull {{ hyperkube_image_name }}:{{ kubernetes_version }}
  register: pull_result
  changed_when: "'Image is up to date' not in pull_result.stdout"

- name: Copy kubeconfig
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  with_items:
    - { src: kubeconfig.yml, dest: /etc/kubernetes/kubelet/kubeconfig.yml }
    - { src: kubeconfig.yml, dest: /etc/kubernetes/kube-proxy/kubeconfig.yml }

- name: Create apiserver and controller-manager directories
  file:
    path: "/etc/kubernetes/{{ item }}"
    state: directory
  with_items:
    - apiserver
    - controller-manager

- name: Copy config file for generating csr
  template:
    src: csr.conf.j2
    dest: /etc/kubernetes/apiserver/csr.conf
    mode: 0644

- name: Generate tls private key and certificate
  shell: |
    openssl req -newkey rsa -nodes -keyout tls.key -new -config csr.conf -out tls.csr
    openssl x509 -req -in tls.csr -CA /etc/ssl/certs/ca.crt -CAkey /etc/ssl/private/ca.key -CAcreateserial -out tls.crt -days 10000 -extensions v3_ext -extfile csr.conf
  args:
    chdir: /etc/kubernetes/apiserver
    creates: tls.crt

- name: Generate rsa public and private keys for service accounts
  shell: |
    openssl genrsa -out controller-manager/sa-private.pem
    openssl rsa -in controller-manager/sa-private.pem -outform PEM -pubout -out apiserver/sa-public.pem
  args:
    chdir: /etc/kubernetes
    creates: apiserver/sa-public.pem

- name: Copy pods and tokens
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - { src: known-tokens.csv.j2, dest: /etc/kubernetes/apiserver/known-tokens.csv, mode: "600" }
    - { src: kube-apiserver.yml.j2, dest: /etc/kubernetes/manifests/kube-apiserver.yml, mode: "644" }
    - { src: kube-controller-manager.yml.j2, dest: /etc/kubernetes/manifests/kube-controller-manager.yml, mode: "644" }
    - { src: kube-scheduler.yml.j2, dest: /etc/kubernetes/manifests/kube-scheduler.yml, mode: "644" }

- name: Create directory for pods
  file:
    path: /etc/kubernetes/pods
    state: directory
    mode: 0666